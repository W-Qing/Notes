(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{246:function(e,a,t){"use strict";t.r(a);var v=t(0),_=Object(v.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"webpack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[e._v("#")]),e._v(" Webpack")]),e._v(" "),t("h2",{attrs:{id:"实践学习"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实践学习"}},[e._v("#")]),e._v(" 实践学习")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://juejin.im/post/5e46e1206fb9a07cbe345dac",target:"_blank",rel:"noopener noreferrer"}},[e._v("Webpack4 基础入门与实践"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://juejin.im/post/5e5420e8e51d4526ea7ef35e",target:"_blank",rel:"noopener noreferrer"}},[e._v("Webpack4 进阶与实践"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"构建流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建流程"}},[e._v("#")]),e._v(" 构建流程")]),e._v(" "),t("p",[e._v("Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("初始化参数")]),e._v("：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；")]),e._v(" "),t("li",[t("strong",[e._v("开始编译")]),e._v("：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；")]),e._v(" "),t("li",[t("strong",[e._v("确定入口")]),e._v("：根据配置中的 entry 找出所有的入口文件；")]),e._v(" "),t("li",[t("strong",[e._v("编译模块")]),e._v("：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；")]),e._v(" "),t("li",[t("strong",[e._v("完成模块编译")]),e._v("：在经过第 4 步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；")]),e._v(" "),t("li",[t("strong",[e._v("输出资源")]),e._v("：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；")]),e._v(" "),t("li",[t("strong",[e._v("输出完成")]),e._v("：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。")])]),e._v(" "),t("p",[e._v("在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。")]),e._v(" "),t("blockquote",[t("p",[e._v("拓展阅读 "),t("a",{attrs:{href:"https://fed.taobao.org/blog/2016/09/10/webpack-flow/",target:"_blank",rel:"noopener noreferrer"}},[e._v("细说 webpack 之流程篇"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"loader-与-plugin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#loader-与-plugin"}},[e._v("#")]),e._v(" Loader 与 Plugin")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",[t("strong",[e._v("Loader")]),e._v('直译为"加载器"。Webpack 将一切文件视为模块，但是 webpack 原生是只能解析 js 文件，如果想将其他文件也打包的话，就会用到'),t("code",[e._v("loader")]),e._v("。 所以 Loader 的作用是让 webpack 拥有了加载和解析_非 JavaScript 文件_的能力。")])]),e._v(" "),t("p",[t("strong",[e._v("常用 Loader：")])]),e._v(" "),t("ul",[t("li",[e._v("file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件")]),e._v(" "),t("li",[e._v("url-loader：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去")]),e._v(" "),t("li",[e._v("source-map-loader：加载额外的 Source Map 文件，以方便断点调试")]),e._v(" "),t("li",[e._v("image-loader：加载并且压缩图片文件")]),e._v(" "),t("li",[e._v("babel-loader：把 ES6 转换成 ES5")]),e._v(" "),t("li",[e._v("css-loader：加载 CSS，支持模块化、压缩、文件导入等特性")]),e._v(" "),t("li",[e._v("style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。")]),e._v(" "),t("li",[e._v("eslint-loader：通过 ESLint 检查 JavaScript 代码")])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",[t("strong",[e._v("Plugin")]),e._v('直译为"插件"。Plugin 可以扩展 webpack 的功能，让 webpack 具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。')])]),e._v(" "),t("p",[t("strong",[e._v("常用 Plugin：")])]),e._v(" "),t("ul",[t("li",[e._v("define-plugin：定义环境变量")]),e._v(" "),t("li",[e._v("html-webpack-plugin：简化 html 文件创建")]),e._v(" "),t("li",[e._v("uglifyjs-webpack-plugin：通过"),t("code",[e._v("UglifyES")]),e._v("压缩"),t("code",[e._v("ES6")]),e._v("代码")]),e._v(" "),t("li",[e._v("webpack-parallel-uglify-plugin: 多核压缩，提高压缩速度")]),e._v(" "),t("li",[e._v("webpack-bundle-analyzer: 可视化 webpack 输出文件的体积")]),e._v(" "),t("li",[e._v("mini-css-extract-plugin: CSS 提取到单独的文件中，支持按需加载")])]),e._v(" "),t("p",[t("strong",[e._v("两者除了概念不同具体用法也不同：")])]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Loader")]),e._v("在"),t("code",[e._v("module.rules")]),e._v("中配置，也就是说他作为模块的解析规则而存在。 类型为数组，每一项都是一个"),t("code",[e._v("Object")]),e._v("，里面描述了对于什么类型的文件（"),t("code",[e._v("test")]),e._v("），使用什么加载 ("),t("code",[e._v("loader")]),e._v(") 和使用的参数（"),t("code",[e._v("options")]),e._v("）")]),e._v(" "),t("li",[t("strong",[e._v("Plugin")]),e._v("在"),t("code",[e._v("plugins")]),e._v("中单独配置。 类型为数组，每一项是一个"),t("code",[e._v("plugin")]),e._v("的实例，参数都通过构造函数传入。")])]),e._v(" "),t("h2",{attrs:{id:"热更新原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#热更新原理"}},[e._v("#")]),e._v(" 热更新原理")]),e._v(" "),t("h2",{attrs:{id:"优化前端性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化前端性能"}},[e._v("#")]),e._v(" 优化前端性能")]),e._v(" "),t("h2",{attrs:{id:"提高打包速度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提高打包速度"}},[e._v("#")]),e._v(" 提高打包速度")]),e._v(" "),t("h2",{attrs:{id:"提高构建速度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提高构建速度"}},[e._v("#")]),e._v(" 提高构建速度")])])}),[],!1,null,null,null);a.default=_.exports}}]);