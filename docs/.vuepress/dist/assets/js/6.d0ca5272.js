(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{212:function(t,s,a){t.exports=a.p+"assets/img/partOfBrowser.7ba7cd1c.png"},213:function(t,s,a){t.exports=a.p+"assets/img/eventloop.796a8f79.jpg"},214:function(t,s,a){t.exports=a.p+"assets/img/scavenge.b8835718.png"},215:function(t,s,a){t.exports=a.p+"assets/img/duixiangjinsheng.7d503b3c.png"},243:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"浏览器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浏览器"}},[t._v("#")]),t._v(" 浏览器")]),t._v(" "),n("h2",{attrs:{id:"组成部分"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组成部分"}},[t._v("#")]),t._v(" 组成部分")]),t._v(" "),n("ol",[n("li",[n("strong",[t._v("用户界面")]),t._v(" - 包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗口显示的你请求的页面外，其他显示的各个部分都属于用户界面。")]),t._v(" "),n("li",[n("strong",[t._v("浏览器引擎")]),t._v(" - 在用户界面和渲染引擎之间传送指令。")]),t._v(" "),n("li",[n("strong",[t._v("渲染引擎")]),t._v(" - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。")]),t._v(" "),n("li",[n("strong",[t._v("网络")]),t._v(" - 用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。")]),t._v(" "),n("li",[n("strong",[t._v("用户界面后端")]),t._v(" - 用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。")]),t._v(" "),n("li",[n("strong",[t._v("JavaScript 解释器")]),t._v("。用于解析和执行 JavaScript 代码。")]),t._v(" "),n("li",[n("strong",[t._v("数据存储")]),t._v("。这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(212),alt:"img"}})]),t._v(" "),n("blockquote",[n("p",[t._v("值得注意的是，和大多数浏览器不同，Chrome 浏览器的每个标签页都分别对应一个渲染引擎实例。每个标签页都是一个独立的进程。")])]),t._v(" "),n("h2",{attrs:{id:"常见内核"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常见内核"}},[t._v("#")]),t._v(" 常见内核")]),t._v(" "),n("p",[t._v("浏览器的内核是指支持浏览器运行的最核心的程序，分为两个部分：一是渲染引擎，另一个是 JS 引擎。")]),t._v(" "),n("p",[t._v("渲染引擎在不同的浏览器中也不是都相同的，目前市面上常见的浏览器内核可以分为这四种：Trident（IE）、Gecko（火狐）、Blink（Chrome、Opera）、Webkit（Safari）。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[t._v("浏览器/RunTime")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("内核（渲染引擎）")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("JavaScript 引擎")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("Chrome")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("Blink（28~） Webkit（Chrome 27）")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("V8")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("FireFox")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("Gecko")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("SpiderMonkey")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("Safari")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("Webkit")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("JavaScriptCore")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("Edge")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("EdgeHTML")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("Chakra(for JavaScript)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("IE")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("Trident")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("Chakra(for JScript)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("PhantomJS")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("Webkit")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("JavaScriptCore")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("Node.js")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("V8")])])])]),t._v(" "),n("h2",{attrs:{id:"渲染机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#渲染机制"}},[t._v("#")]),t._v(" 渲染机制")]),t._v(" "),n("p",[t._v("先了解下浏览器请求加载资源的过程，然后才能更好的理解浏览器的渲染机制。")]),t._v(" "),n("p",[n("strong",[t._v("浏览器请求加载一个资源的主要过程：")])]),t._v(" "),n("ul",[n("li",[t._v("浏览器根据 DNS 服务器得到域名的 IP 地址")]),t._v(" "),n("li",[t._v("向这个 IP 的服务器发送 http 请求")]),t._v(" "),n("li",[t._v("服务器收到请求，处理并返回 http 请求")]),t._v(" "),n("li",[t._v("浏览器得到返回内容")])]),t._v(" "),n("p",[t._v("浏览器得到服务器返回的内容后，接下来就是渲染过程。")]),t._v(" "),n("p",[n("strong",[t._v("浏览器渲染页面的过程：")])]),t._v(" "),n("ol",[n("li",[t._v("解析 HTML 结构生成 DOM 树形结构—"),n("strong",[t._v("DOM Tree")])]),t._v(" "),n("li",[t._v("解析 CSS，生成 CSS 规则树—"),n("strong",[t._v("CSSOM Tree")])]),t._v(" "),n("li",[t._v("解析完成后，浏览器引擎会通过 DOM API 和 CSSOM API 来操作 DOM Tree 和 CSSOM Tree，组合形成渲染树—"),n("strong",[t._v("Render Tree")])]),t._v(" "),n("li",[t._v("根据渲染树来进行布局—"),n("strong",[t._v("Layout")]),t._v(" （计算出各个节点在页面中的确切位置和大小，所有相对测量值都将转换为屏幕上的绝对像素）")]),t._v(" "),n("li",[t._v("布局完成后，浏览器会立即发出“Paint Setup”和“Paint”事件，将渲染树转换成屏幕上的像素，即绘制页面—"),n("strong",[t._v("reflow/repaint")])])]),t._v(" "),n("blockquote",[n("ul",[n("li",[t._v("遇到"),n("code",[t._v("<script>")]),t._v(" 时，会执行并阻塞渲染，因为 JS 有可能改变 DOM 树结构 ( GUI 渲染线程与 JS 引擎线程互斥 )")]),t._v(" "),n("li",[t._v("而 img、 video 则是异步加载，不会阻塞渲染")]),t._v(" "),n("li",[t._v("通常情况下 DOM 和 CSSOM 是并行构建的，但是当浏览器遇到一个不带 defer 或 async 属性的 script 标签时，DOM 构建将暂停，如果此时又恰巧浏览器尚未完成 CSSOM 的下载和构建，由于 JavaScript 可以修改 CSSOM，所以需要等 CSSOM 构建完毕后再执行 JS，最后才重新进行 DOM 构建")])])]),t._v(" "),n("p",[n("strong",[t._v("浏览器的重排与重绘")])]),t._v(" "),n("p",[t._v("区别：")]),t._v(" "),n("ul",[n("li",[t._v("重排：部分渲染树（或者整个渲染树）需要重新分析，并且节点尺寸需要重新计算，表现为重新生成布局，重新排列元素")]),t._v(" "),n("li",[t._v("重绘：节点的几何属性发生改变或者样式发生改变，例如改变元素背景色时，屏幕上的部分内容需要更新，表现为某些元素的外观被改变")])]),t._v(" "),n("p",[t._v("单单改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成重排之后，将会重新绘制受到此次重排影响的部分。即：『重绘』不一定会出现『重排』，『重排』必然会出现『重绘』。")]),t._v(" "),n("p",[t._v("重排和重绘代价是高昂的，如果处理不好，它们会使 UI 展示变得迟缓，破坏用户体验。")]),t._v(" "),n("p",[t._v("虽然任何改变用来构建渲染树的信息都会导致一次重排或重绘，但可以通过几种方法尽量减少重排或重绘：")]),t._v(" "),n("ol",[n("li",[t._v("通过改变 class 的方式来集中改变样式")]),t._v(" "),n("li",[t._v("通过 createDocumentFragment 创建一个游离于 DOM 树之外的节点，然后在此节点上批量操作，最后插入 DOM 树中，因此只触发一次重排")]),t._v(" "),n("li",[t._v("使用 CSS 的 will-change 属性将元素提升为合成层")])]),t._v(" "),n("blockquote",[n("p",[t._v("关于合成层的详解请移步 "),n("a",{attrs:{href:"https://fed.taobao.org/blog/2016/04/26/performance-composite/",target:"_blank",rel:"noopener noreferrer"}},[t._v("无线性能优化：Composite"),n("OutboundLink")],1)])]),t._v(" "),n("p",[t._v("两者相比之下显然重排的性能影响更大，在两者无法避免的情况下应优先选择代价更小的重绘。")]),t._v(" "),n("p",[n("strong",[t._v("Load 和 DOMContentLoaded 区别：")])]),t._v(" "),n("p",[t._v("window.onload  事件触发代表页面中的 DOM，CSS，JS，图片已经全部加载完毕。")]),t._v(" "),n("p",[t._v("DOMContentLoaded 事件触发代表初始的 HTML 被完全加载和解析，不需要等待 CSS，JS，图片加载。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'load'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 页面的全部资源加载完才会执行，包括图片、视频等")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ndocument"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'DOMContentLoaded'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DOM 渲染完即可执行，此时图片、视频可能还没有加载完")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("blockquote",[n("p",[t._v("推荐阅读：")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/ljianshu/Blog/issues/51",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入浅出浏览器渲染原理"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/berwin/Blog/issues/29",target:"_blank",rel:"noopener noreferrer"}},[t._v("关键渲染路径"),n("OutboundLink")],1),t._v(" 👏")]),t._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.im/post/5e143104e51d45414a4715f7#heading-28",target:"_blank",rel:"noopener noreferrer"}},[t._v("从 8 道面试题看浏览器渲染过程与性能优化"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"http://taligarsiel.com/Projects/howbrowserswork1.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("How Browsers work "),n("OutboundLink")],1)])])]),t._v(" "),n("h2",{attrs:{id:"event-loop-🌟"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-loop-🌟"}},[t._v("#")]),t._v(" Event Loop 🌟")]),t._v(" "),n("h3",{attrs:{id:"栈、队列的基本概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#栈、队列的基本概念"}},[t._v("#")]),t._v(" 栈、队列的基本概念")]),t._v(" "),n("p",[n("strong",[t._v("栈（Stack）")])]),t._v(" "),n("ul",[n("li",[t._v("栈在计算机科学中是限定仅在"),n("strong",[t._v("表尾")]),t._v("进行"),n("strong",[t._v("插入")]),t._v("或"),n("strong",[t._v("删除")]),t._v("操作的线性表。")]),t._v(" "),n("li",[t._v("栈是一种数据结构，它按照"),n("strong",[t._v("后进先出")]),t._v("的原则存储数据，"),n("strong",[t._v("先进入")]),t._v("的数据被压入"),n("strong",[t._v("栈底")]),t._v("，"),n("strong",[t._v("最后的数据")]),t._v("在"),n("strong",[t._v("栈顶")]),t._v("，需要读数据的时候从"),n("strong",[t._v("栈顶")]),t._v("开始"),n("strong",[t._v("弹出数据")]),t._v("。（"),n("code",[t._v("LIFO: last in first out")]),t._v("）")]),t._v(" "),n("li",[t._v("栈是只能在"),n("strong",[t._v("某一端插入")]),t._v("和"),n("strong",[t._v("删除")]),t._v("的"),n("strong",[t._v("特殊线性表")]),t._v("。")])]),t._v(" "),n("p",[n("strong",[t._v("队列（Queue）")])]),t._v(" "),n("ul",[n("li",[t._v("特殊之处在于它只允许在表的前端（"),n("code",[t._v("front")]),t._v("）进行"),n("strong",[t._v("删除")]),t._v("操作，而在表的后端（"),n("code",[t._v("rear")]),t._v("）进行"),n("strong",[t._v("插入")]),t._v("操作，和"),n("strong",[t._v("栈")]),t._v("一样，"),n("strong",[t._v("队列")]),t._v("是一种操作受限制的线性表。")]),t._v(" "),n("li",[t._v("进行"),n("strong",[t._v("插入")]),t._v("操作的端称为"),n("strong",[t._v("队尾")]),t._v("，进行"),n("strong",[t._v("删除")]),t._v("操作的端称为"),n("strong",[t._v("队头")]),t._v("。 队列中没有元素时，称为"),n("strong",[t._v("空队列")]),t._v("。")]),t._v(" "),n("li",[n("strong",[t._v("队列")]),t._v("的数据元素又称为"),n("strong",[t._v("队列元素")]),t._v("。在队列中插入一个队列元素称为"),n("strong",[t._v("入队")]),t._v("，从"),n("strong",[t._v("队列")]),t._v("中"),n("strong",[t._v("删除")]),t._v("一个队列元素称为"),n("strong",[t._v("出队")]),t._v("。")]),t._v(" "),n("li",[t._v("因为队列"),n("strong",[t._v("只允许")]),t._v("在一端"),n("strong",[t._v("插入")]),t._v("，在另一端"),n("strong",[t._v("删除")]),t._v("，所以只有"),n("strong",[t._v("最早")]),t._v("进入"),n("strong",[t._v("队列")]),t._v("的元素"),n("strong",[t._v("才能最先从队列中")]),t._v("删除，故队列又称为"),n("strong",[t._v("先进先出")]),t._v("。（"),n("code",[t._v("FIFO: first in first out")]),t._v("）")])]),t._v(" "),n("h3",{attrs:{id:"宏认为与微任务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#宏认为与微任务"}},[t._v("#")]),t._v(" 宏认为与微任务")]),t._v(" "),n("p",[t._v("在"),n("code",[t._v("JavaScript")]),t._v("中，任务被分为两种，一种宏任务（"),n("code",[t._v("MacroTask")]),t._v("）也叫"),n("code",[t._v("Task")]),t._v("，一种叫微任务（"),n("code",[t._v("MicroTask")]),t._v("），也叫"),n("code",[t._v("Jobs")]),t._v("。")]),t._v(" "),n("p",[n("strong",[t._v("MacroTask（宏任务）")])]),t._v(" "),n("p",[t._v("在 JavaScript 中，大部分的任务都是在主线程上执行，为了让这些事件有条不紊地进行，JS 引擎需要对它们的执行顺序做一定的安排，V8 其实采用的是"),n("code",[t._v("队列")]),t._v("的方式来存储这些同步任务， 即先进来的先执行。")]),t._v(" "),n("ul",[n("li",[t._v("script 全部代码，即 js 脚本执行")]),t._v(" "),n("li",[t._v("setTimeout、setInterval、setImmediate（只有 IE10 支持）")]),t._v(" "),n("li",[t._v("I/O 用户交互、网络请求、文件读写完成事件等")]),t._v(" "),n("li",[t._v("UI rendering 渲染事件")])]),t._v(" "),n("p",[n("strong",[t._v("MicroTask（微任务）")])]),t._v(" "),n("p",[t._v("如果异步回调也像宏任务一样进行队列的入队操作，那么执行这些回调的时机就是在前面"),n("code",[t._v("所有的宏任务")]),t._v("完成之后（先进先出），倘若现在的任务队列非常长，那么异步回调迟迟得不到执行，会造成"),n("code",[t._v("应用卡顿")]),t._v("。")]),t._v(" "),n("p",[t._v("为了规避这样的问题，V8 引入了"),n("code",[t._v("微任务")]),t._v("的解决方式。在每一个宏任务中定义一个"),n("strong",[t._v("微任务队列")]),t._v("，当该宏任务执行完成，会检查其中的微任务队列，如果为空则直接执行下一个宏任务，如果不为空，则"),n("code",[t._v("依次执行微任务")]),t._v("，执行完成才去执行下一个宏任务。")]),t._v(" "),n("ul",[n("li",[t._v("Promise、fetch API")]),t._v(" "),n("li",[t._v("Object.observe （废弃）")]),t._v(" "),n("li",[t._v("MutationObserver")]),t._v(" "),n("li",[t._v("process.nextTick（Node 独有）")]),t._v(" "),n("li",[t._v("V8 的垃圾回收")])]),t._v(" "),n("p",[n("strong",[t._v("requestAnimationFrame")])]),t._v(" "),n("p",[n("code",[t._v("requestAnimationFrame")]),t._v("也属于异步执行的方法，但该方法既不属于宏任务，也不属于微任务。")]),t._v(" "),n("blockquote",[n("p",[n("code",[t._v("window.requestAnimationFrame()")]),t._v(" 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。")])]),t._v(" "),n("p",[t._v("requestAnimationFrame 是 GUI 渲染之前执行，但在微服务之后，不过 requestAnimationFrame 不一定会在当前帧必须执行，由浏览器根据当前的策略自行决定在哪一帧执行。")]),t._v(" "),n("h3",{attrs:{id:"浏览器端的-event-loop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浏览器端的-event-loop"}},[t._v("#")]),t._v(" 浏览器端的 Event Loop")]),t._v(" "),n("p",[n("strong",[t._v("Event Loop（事件循环）是指浏览器或"),n("code",[t._v("Node")]),t._v("的一种实现"),n("code",[t._v("javaScript")]),t._v("单线程运行时不会阻塞的一种机制（JS 运行机制）")]),t._v("，也就是我们经常使用的"),n("strong",[t._v("异步")]),t._v("的原理。")]),t._v(" "),n("p",[t._v("众所周知 JS 是一门非阻塞的单线程语言，同一时间只能执行一个任务，即代码的执行是同步并且阻塞的。")]),t._v(" "),n("blockquote",[n("ol",[n("li",[t._v("首先是历史原因，在创建 JS 这门语言时，多进程多线程的架构并不流行，硬件支持并不好。")]),t._v(" "),n("li",[t._v("其次是因为多线程的复杂性，多线程操作需要加锁，编码的复杂性会增高。")]),t._v(" "),n("li",[t._v("最主要的是，JS 就是为了和浏览器交互而诞生的，如果在多个线程中同时操作 DOM ，在不加锁的情况下，最终会导致 DOM 渲染的结果不可预期（一个线程中新加节点，另一个线程中删除节点）。")])])]),t._v(" "),n("blockquote",[n("p",[t._v('尽管 HTML5 中有 Web-Worker，但 JS 仍然是单线程的。一切 JavaScript 版的"多线程"都是用单线程模拟出来的。')])]),t._v(" "),n("p",[t._v("只有一个主线程，那 javascript 是如何处理各种同步与异步函数的调用关系的？答案是——"),n("strong",[t._v("调用栈")]),t._v("。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(213),alt:"Event Loop"}})]),t._v(" "),n("p",[t._v("单线程的运行环境有且只有一个 "),n("code",[t._v("call-stack")]),t._v(" 调用栈（执行栈），所有的任务都会被放到调用栈等待浏览器的主线程执行。")]),t._v(" "),n("p",[t._v("调用栈采用的是后进先出 (LIFO) 的规则，当一个函数被执行的时候，它会被添加到栈的顶部（如果它的函数体内有其他函数，则将新的函数加到栈顶），当函数在调用栈内被执行完成后，就会从栈顶移出，直到栈内被清空。")]),t._v(" "),n("p",[t._v("当调用栈执行完毕之后，就会在队列里面找任务，如果有微任务，就会先执行微任务，再去执行宏任务。")]),t._v(" "),n("p",[n("strong",[t._v("事件循环：")]),t._v(" 就是同步任务进入主线程，异步任务加入到任务队列中。等主线程的任务执行完就去执行任务队列中的任务，这个过程会不断重复。"),n("strong",[t._v("所有同步任务都在主线程上执行，形成一个执行栈。主线程之外，存在一个任务队列 (task queue), 异步任务有了运行结果会在任务队列之中放置一个任务。执行栈中的所有同步任务执行完毕后读取任务队列（先读取微任务、宏任务）不断重复上面的第三步。")])]),t._v(" "),n("blockquote",[n("p",[t._v("本质上来说 JS 中的异步还是同步行为")])]),t._v(" "),n("p",[t._v("有点晕？看这里👉🏻"),n("a",{attrs:{href:"https://www.bilibili.com/video/av74599059?t=960",target:"_blank",rel:"noopener noreferrer"}},[t._v("到底什么是 Event Loop 呢？"),n("OutboundLink")],1),t._v("👀")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script start'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'setTimeout'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script end'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("举个🌰，上面👆的代码中虽然 setTimeout 延时为 0，但它还是异步的。所以 setTimeout 还是会在 script end 之后打印。")]),t._v(" "),n("blockquote",[n("p",[t._v("In fact, HTML5 标准规定这个函数第二个参数不得小于 4 毫秒，不足会自动增加。")])]),t._v(" "),n("p",[t._v("不同的任务源会被分配到不同的 Task 队列中。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script start'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'setTimeout'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Promise'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'promise1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'promise2'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script end'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \t\t\t 1\t\t\t\t\t\t2\t\t\t\t\t\t\t3\t\t\t\t\t\t4\t\t\t\t\t\t5\t\t\t\t\t\t6")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// script start => Promise => script end => promise1 => promise2 => setTimeout")]),t._v("\n")])])]),n("p",[t._v("以上代码虽然 setTimeout 写在 Promise 之前，但是因为 Promise 属于微任务而 setTimeout 属于宏任务，所以会有以上的打印。")]),t._v(" "),n("p",[t._v("所以正确的一次 Event loop 顺序是这样的：")]),t._v(" "),n("ol",[n("li",[t._v("一开始整段脚本作为第一个"),n("strong",[t._v("宏任务")]),t._v("执行 (main script)")]),t._v(" "),n("li",[t._v("执行过程中同步代码 (1)(2)(3) 直接执行，"),n("strong",[t._v("宏任务")]),t._v("进入宏任务队列，"),n("strong",[t._v("微任务")]),t._v("进入微任务队列")]),t._v(" "),n("li",[t._v("当前宏任务执行完出队，检查微任务队列，如果有则依次执行 (4)(5)，直到微任务队列为空")]),t._v(" "),n("li",[t._v("必要的话，执行浏览器 UI 线程的渲染工作")]),t._v(" "),n("li",[t._v("检查是否有 Web worker 任务，有则执行")]),t._v(" "),n("li",[t._v("执行队首新的宏任务 (6)，回到 2，开始下一轮 Event loop，依此循环，直到宏任务和微任务队列都为空")])]),t._v(" "),n("p",[t._v("通过上述的 Event loop 顺序可知，如果宏任务中的异步代码有大量的计算并且需要操作 DOM 的话，为了更快的 界面响应，我们可以把操作 DOM 放入微任务中。")]),t._v(" "),n("blockquote",[n("p",[t._v("⚠️注意：Promise 的 executor 是一个同步函数，即非异步，立即执行的一个函数，因此它 (2) 应该是和当前的任务一起执行的。而 Promise 的链式调用 then，每次都会在内部生成一个新的 Promise，然后执行 then，在执行的过程中不断向微任务 (microtask) 推入新的函数，因此直至微任务的队列清空后才会执行下一波的 macrotask。")])]),t._v(" "),n("blockquote",[n("p",[t._v("墙裂推荐阅读：")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://juejin.im/post/59e85eebf265da430d571f89",target:"_blank",rel:"noopener noreferrer"}},[t._v("这一次，彻底弄懂 JavaScript 执行机制"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://mp.weixin.qq.com/s/8xyccve0e9uA2mnk07CAWw",target:"_blank",rel:"noopener noreferrer"}},[t._v("面试问到 Event Loop，这样回答最完美"),n("OutboundLink")],1),t._v(" 👏")]),t._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.im/post/5c9a43175188252d876e5903",target:"_blank",rel:"noopener noreferrer"}},[t._v("Eventloop 不可怕，可怕的是遇上 Promise"),n("OutboundLink")],1),t._v(" 😫")])])]),t._v(" "),n("h2",{attrs:{id:"垃圾回收机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收机制"}},[t._v("#")]),t._v(" 垃圾回收机制")]),t._v(" "),n("p",[t._v("JavaScript 会在创建变量（对象，字符串等）时分配内存，并且在不再使用它们时“自动”释放。 而这个释放无用变量内存的过程被称为垃圾回收。")]),t._v(" "),n("h3",{attrs:{id:"内存模型与生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存模型与生命周期"}},[t._v("#")]),t._v(" 内存模型与生命周期")]),t._v(" "),n("p",[n("strong",[t._v("内存模型")])]),t._v(" "),n("ol",[n("li",[t._v("基本类型数据以及复杂类型数据都是如何存放的呢？")])]),t._v(" "),n("ul",[n("li",[t._v("基本类型普遍被存放在『栈』中，而复杂类型是被存放在堆内存的。")])]),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[t._v("执行栈的函数是如何使用内存堆的复杂类型？")])]),t._v(" "),n("ul",[n("li",[t._v("实际上，执行栈的函数上下文会保存一个内存堆对应复杂类型对象的内存地址，通过引用来使用复杂类型对象。")])]),t._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[t._v("是否所有的基本类型都储存在栈中呢？")])]),t._v(" "),n("ul",[n("li",[t._v("并不是，当一个基本类型被闭包引用之后，就可以长期存在于内存中，这个时候即使他是基本类型，也是会被存放在堆中的。")])]),t._v(" "),n("p",[n("strong",[t._v("生命周期")])]),t._v(" "),n("p",[t._v("不管什么程序语言，内存生命周期基本都是一样的：分配 => 使用（读、写）=> 释放")]),t._v(" "),n("blockquote",[n("p",[t._v("所有语言第二部分都是明确的。第一和第三部分在底层语言中是明确的，但在像 JavaScript 这些高级语言中，大部分都是隐含的。")])]),t._v(" "),n("h3",{attrs:{id:"v8-分代式回收机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#v8-分代式回收机制"}},[t._v("#")]),t._v(" V8 分代式回收机制")]),t._v(" "),n("p",[t._v("V8 的 GC （Garbage Collection）算法策略基于分代式回收机制，该机制又基于"),n("strong",[t._v("世代假说。")])]),t._v(" "),n("p",[t._v("该假说有两个特点：")]),t._v(" "),n("ul",[n("li",[t._v("大部分新生对象倾向于早死")]),t._v(" "),n("li",[t._v("不死的对象，会活得更久")])]),t._v(" "),n("p",[t._v("基于这个理论，V8 引擎根据对象的存活时间将内存（堆）分为新生代（new space）和老生代（old space）两部分。")]),t._v(" "),n("ul",[n("li",[t._v("新生代：对象的存活时间较短。新生对象或只经过一次垃圾回收的对象。")]),t._v(" "),n("li",[t._v("老生代：对象存活时间较长。经历过一次或多次垃圾回收的对象。")])]),t._v(" "),n("p",[t._v("因为内存分代，并对不同分代的内存采用不同的高效算法进行垃圾回收。V8 实现了准确式的 GC。")]),t._v(" "),n("p",[n("strong",[t._v("全停顿（Stop The World）")])]),t._v(" "),n("p",[t._v("在介绍垃圾回收算法之前，先了解一个概念，全停顿：")]),t._v(" "),n("p",[t._v("为避免应用逻辑与垃圾回收器看到的情况不一致，垃圾回收算法在执行前，需要将应用逻辑暂停，执行完垃圾回收后再执行应用逻辑，这种行为称为 「全停顿」。例如，如果一次 GC 需要 50ms，应用逻辑就会暂停 50ms。")]),t._v(" "),n("h4",{attrs:{id:"新生代-scavenge-算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#新生代-scavenge-算法"}},[t._v("#")]),t._v(" 新生代 Scavenge 算法")]),t._v(" "),n("p",[t._v("新生代中的对象主要通过 Scavenge 算法进行垃圾回收。Scavenge 的具体实现，主要采用了 Cheney 算法。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(214),alt:"Scavenge 算法"}})]),t._v(" "),n("ol",[n("li",[t._v("在新生代空间中，将堆内存空间分为两部分（semispace）。")]),t._v(" "),n("li",[t._v("在这两个空间中，必定有一个空间是使用的（From 空间），另一个空间是空闲的（To 空间）。")]),t._v(" "),n("li",[t._v("在 From 空间中分配新对象内存，当 From 空间被占满时，新生代 GC 就会启动执行。")]),t._v(" "),n("li",[t._v("检查 From 空间的存活对象，若对象存活，则检查对象是否符合晋升条件，若符合条件则晋升到老生代，否则将对象从 From 空间复制到 To 空间。")]),t._v(" "),n("li",[t._v("若对象失活，则销毁失活对象并释放空间。")]),t._v(" "),n("li",[t._v("当复制完成后，将 From 空间和 To 空间互换，进行角色翻转（flip），这样 GC 就结束了。")])]),t._v(" "),n("p",[t._v("Scavenge/Cheney 算法的缺点是，它的算法机制决定了只能利用一半的内存空间。但是新生代中的对象生存周期短、存活对象少，进行对象复制的成本不是很高，因而非常适合这种场景。")]),t._v(" "),n("h4",{attrs:{id:"老生代算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#老生代算法"}},[t._v("#")]),t._v(" 老生代算法")]),t._v(" "),n("p",[t._v("首先，老生代空间中的对象也是从新生代中晋升而来的，对象晋升到老生代后，将接受新的垃圾回收算法处理。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(215),alt:"对象晋升"}})]),t._v(" "),n("p",[n("strong",[t._v("对象晋升的条件：")])]),t._v(" "),n("ol",[n("li",[n("p",[t._v("对象是否经历过一次 Scavenge 算法回收。👆")]),t._v(" "),n("blockquote",[n("p",[t._v("对象从 From 空间复制 To 空间时，会"),n("strong",[t._v("检查对象的内存地址")]),t._v("来判断对象是否已经经过一次 Scavenge 回收。若经历过，则将对象从 From 空间复制到老生代中；若没有经历，则复制到 To 空间。")])])]),t._v(" "),n("li",[n("p",[t._v("To 空间的对象内存使用占比是否超过 25%的限制。")]),t._v(" "),n("blockquote",[n("p",[t._v("当对象从 From 空间复制到 To 空间时，若 To 空间使用超过 25%，则对象直接晋升到老生代中。设置为 25%的比例的原因是，当完成 Scavenge 回收后，To 空间将翻转成 From 空间，继续进行对象内存的分配。若占比过大，将影响后续内存分配。")])])])]),t._v(" "),n("p",[t._v("老生代中的对象有两个特点，第一是存活对象多，第二个存活时间长。")]),t._v(" "),n("p",[t._v("若在老生代中使用 Scavenge 算法进行垃圾回收，将会导致复制存活对象的效率不高，且还会浪费一半的空间。")]),t._v(" "),n("p",[t._v("因而，V8 在老生代采用**标记清除（Mark-Sweep ）"),n("strong",[t._v("和")]),t._v("标记压缩（Mark-Compact ）**两种算法进行垃圾回收。")]),t._v(" "),n("p",[t._v("Mark-Sweep，分为标记和清除两个阶段：")]),t._v(" "),n("ol",[n("li",[t._v("标记阶段，它将遍历堆中所有对象，并对存活的对象进行标记。")]),t._v(" "),n("li",[t._v("清除阶段，对未标记对象的空间进行回收。")])]),t._v(" "),n("blockquote",[n("p",[t._v("与 Scavenge 算法不同，Mark-Sweep 不会对内存一分为二，因此不会浪费空间。但是，经历过一次 Mark-Sweep 之后，内存的空间将会变得不连续，这样会对后续内存分配造成问题。比如，当需要分配一个比较大的对象时，没有任何一个碎片内支持分配，这将提前触发一次垃圾回收，尽管这次垃圾回收是没有必要的。")])]),t._v(" "),n("p",[t._v("清除对象后会造成堆内存出现碎片的情况，为了提高对内存的利用，当碎片超过一定限制后会启动 Mark-Compact 压缩算法。")]),t._v(" "),n("blockquote",[n("p",[t._v("Mark-Compact 是在 Mark-Sweep 算法上进行了改进，标记阶段与 Mark-Sweep 相同，但是对未标记的对象处理方式不同。Mark-Sweep 是对未标记的对象立即进行回收，Mark-Compact 则是将存活的对象移动到一边，直到所有对象都移动完成然后清理掉不需要的内存。")])]),t._v(" "),n("p",[t._v("由于 Mark-Compact 需要移动对象，所以执行速度上，比 Mark-Sweep 要慢。所以，V8 主要使用 Mark-Sweep 算法，然后在当空间内存分配不足时，采用 Mark-Compact 算法。")]),t._v(" "),n("p",[n("strong",[t._v("增量标记（Incremental Marking）")])]),t._v(" "),n("p",[t._v("在新生代中，由于存活对象少，垃圾回收效率高，全停顿时间短，造成的影响小。但是老生代中，存活对象多，垃圾回收时间长，全停顿造成的影响大。长时间的 GC，会导致应用暂停和无响应，将会导致糟糕的用户体验。")]),t._v(" "),n("p",[t._v("为了减少全停顿时间过长带来的性能问题，2011 年，V8 对标记进行了优化，从 stop-the-world 标记切换到增量标记，即将一次停顿进行的标记工作分解为更小的模块，可以让 JS 应用逻辑在模块间隙执行一会，这样交替多次后完成标记，从而不至于让应用出现停顿情况。改进后的标记方式，最大停顿时间减少到原来的 1/6。")]),t._v(" "),n("p",[n("strong",[t._v("并发标记")])]),t._v(" "),n("p",[t._v("在 2018 年，GC 技术又有了一个重大突破，这项技术名为并发标记。该技术可以让 GC 扫描和标记对象时，同时允许 JS 运行，可以点击 "),n("a",{attrs:{href:"https://v8project.blogspot.com/2018/06/concurrent-marking.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("该博客"),n("OutboundLink")],1),t._v(" 详细阅读。")]),t._v(" "),n("p",[n("strong",[t._v("内存泄漏")])]),t._v(" "),n("p",[t._v("会引起内存泄漏的几种禁忌：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("滥用闭包")])]),t._v(" "),n("li",[n("p",[t._v("滥用全局变量：直接用全局变量赋值，在函数中滥用 this 指向全局对象")])]),t._v(" "),n("li",[n("p",[t._v("不销毁定时器和回调")])]),t._v(" "),n("li",[n("p",[t._v("DOM 引用不规范，很多时候，我们对 Dom 的操作，会把 Dom 的引用保存在一个数组或者 Map 中，往往无法对其进行内存回收。")])])]),t._v(" "),n("blockquote",[n("p",[t._v("ES6 中引入 WeakSet 和 WeakMap 两个新的概念，来解决引用造成的内存回收问题。WeakSet 和 WeakMap 对于值的引用可以忽略不计，他们对于值的引用是弱引用，内存回收机制，不会考虑这种引用。当其他引用被消除后，引用就会从内存中被释放。")])]),t._v(" "),n("h2",{attrs:{id:"事件机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件机制"}},[t._v("#")]),t._v(" 事件机制")]),t._v(" "),n("h3",{attrs:{id:"事件触发三阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件触发三阶段"}},[t._v("#")]),t._v(" 事件触发三阶段")]),t._v(" "),n("ol",[n("li",[n("strong",[t._v("捕获：")]),t._v(" "),n("code",[t._v("window")]),t._v(" 往事件触发处传播，遇到注册的捕获事件会触发。")]),t._v(" "),n("li",[t._v("传播到事件触发处时触发注册的事件。")]),t._v(" "),n("li",[n("strong",[t._v("冒泡：")]),t._v(" 从事件触发处往 "),n("code",[t._v("window")]),t._v(" 传播，遇到注册的冒泡事件会触发。")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以下会先打印冒泡然后是捕获")]),t._v("\nnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'冒泡'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'捕获 '")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("ul",[n("li",[t._v("阻止事件冒泡 e.stopPropagation()")])]),t._v(" "),n("h3",{attrs:{id:"注册事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注册事件"}},[t._v("#")]),t._v(" 注册事件")]),t._v(" "),n("p",[t._v("通常我们使用 "),n("code",[t._v("addEventListener")]),t._v(" 注册事件，该函数的第三个参数可以是布尔值，也可以是对象。对于布尔值 "),n("code",[t._v("useCapture")]),t._v(" 参数来说，该参数默认值为 "),n("code",[t._v("false")]),t._v(" 。"),n("code",[t._v("useCapture")]),t._v(" 决定了注册的事件是捕获事件还是冒泡事件。对于对象参数来说，可以使用以下几个属性")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("capture")]),t._v("，布尔值，和 "),n("code",[t._v("useCapture")]),t._v(" 作用一样")]),t._v(" "),n("li",[n("code",[t._v("once")]),t._v("，布尔值，值为 "),n("code",[t._v("true")]),t._v(" 表示该回调只会调用一次，调用后会移除监听")]),t._v(" "),n("li",[n("code",[t._v("passive")]),t._v("，布尔值，表示永远不会调用 "),n("code",[t._v("preventDefault")])])]),t._v(" "),n("p",[t._v("一般来说，我们只希望事件只触发在目标上，这时候可以使用 "),n("code",[t._v("stopPropagation")]),t._v(" 来阻止事件的进一步传播。通常我们认为 "),n("code",[t._v("stopPropagation")]),t._v(" 是用来阻止事件冒泡的，其实该函数也可以阻止捕获事件。"),n("code",[t._v("stopImmediatePropagation")]),t._v(" 同样也能实现阻止事件，但是还能阻止该事件目标执行别的注册事件。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("stopImmediatePropagation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'冒泡'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 点击 node 只会执行上面的函数，该函数不会执行")]),t._v("\nnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'捕获 '")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h3",{attrs:{id:"事件代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件代理"}},[t._v("#")]),t._v(" 事件代理")]),t._v(" "),n("p",[t._v("如果一个节点中的子节点是动态生成的，那么子节点需要注册事件的话应该注册在父节点上，即事件代理。")]),t._v(" "),n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("item1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("项目 1"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("item2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("项目 2"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("item3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("项目 3"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 随时会新增更多的 li 标签 --\x3e")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token script"}},[n("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ul "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#list'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  ul"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("事件代理的方式相对于直接给目标注册事件来说，有以下优点")]),t._v(" "),n("ul",[n("li",[t._v("节省内存")]),t._v(" "),n("li",[t._v("不需要给子节点注销事件")])]),t._v(" "),n("h2",{attrs:{id:"bom-操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bom-操作"}},[t._v("#")]),t._v(" BOM 操作")]),t._v(" "),n("p",[t._v("BOM（浏览器对象模型）是浏览器本身的一些信息的设置和获取，例如获取浏览器的宽度、高度，设置让浏览器跳转到哪个地址。")]),t._v(" "),n("ul",[n("li",[t._v("window.screen 对象：包含有关用户屏幕的信息")]),t._v(" "),n("li",[t._v("window.location 对象：用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面")]),t._v(" "),n("li",[t._v("window.history 对象：浏览历史的前进后退等")]),t._v(" "),n("li",[t._v("window.navigator 对象：常常用来获取浏览器信息、是否移动端访问等等")])]),t._v(" "),n("p",[t._v("举几个例子🌰")]),t._v(" "),n("ul",[n("li",[t._v("获取屏幕的宽度和高度 "),n("code",[t._v("screen.width")]),t._v(" 与 "),n("code",[t._v("screen.height")])]),t._v(" "),n("li",[t._v("复制代码获取网址、协议、path、参数、hash 等")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 例如当前网址是 https://xxx.com/demo/frontend?a=10&b=10#some")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("location"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("href"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// https://xxx.com/demo/frontend?a=10&b=10#some")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("location"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("protocol"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// https:")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("location"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pathname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// /demo/frontend")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("location"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("search"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ?a=10&b=10")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("location"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hash"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// #some")]),t._v("\n")])])]),n("ul",[n("li",[t._v("复制代码另外，还有调用浏览器的前进、后退功能等 "),n("code",[t._v("history.back()")]),t._v("与"),n("code",[t._v("history.forward()")])]),t._v(" "),n("li",[t._v("复制代码获取浏览器特性（即俗称的 UA）然后识别客户端，例如判断是不是 Chrome 浏览器")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ua "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" navigator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("userAgent\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" isChrome "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ua"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Chrome'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isChrome"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h2",{attrs:{id:"ajax-与-跨域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ajax-与-跨域"}},[t._v("#")]),t._v(" Ajax 与 跨域")]),t._v(" "),n("h3",{attrs:{id:"ajax"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ajax"}},[t._v("#")]),t._v(" Ajax")]),t._v(" "),n("blockquote",[n("p",[t._v("推荐阅读："),n("a",{attrs:{href:"https://juejin.im/post/58c883ecb123db005311861a",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ajax 知识体系大梳理"),n("OutboundLink")],1)])]),t._v(" "),n("h3",{attrs:{id:"跨域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),n("p",[n("strong",[t._v("同源策略：")])]),t._v(" "),n("p",[t._v("因为浏览器出于安全考虑，限制了从同一个源加载的文档或脚本与来自另一个源的资源进行交互，即同源策略，这是一个用于隔离潜在恶意文件的重要安全机制。")]),t._v(" "),n("p",[t._v('同源是指"协议+域名+端口"三者相同，即便两个不同的域名指向同一个 ip 地址，也非同源。')]),t._v(" "),n("p",[t._v("协议、域名或者端口有一个不同就算跨域，而且所有的跨域请求都必须经过信息提供方允许，否则 Ajax 请求就会失败。")]),t._v(" "),n("p",[t._v("浏览器中的大部分内容都是受同源策略限制的，但是以下三个 HTML 标签可以不受限制，可以跨域加载资源：")]),t._v(" "),n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("img")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xxx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xxx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xxx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("因此这三个标签分别有它们的使用场景：")]),t._v(" "),n("blockquote",[n("p",[t._v("img 用于打点统计，统计网站可能是其他域")]),t._v(" "),n("p",[t._v("link、script 可以使用 CDN，CDN 加载的也是其他域资源")]),t._v(" "),n("p",[t._v("script 可以用于 JSONP")])]),t._v(" "),n("h4",{attrs:{id:"几种实现跨域的常用方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#几种实现跨域的常用方法"}},[t._v("#")]),t._v(" 几种实现跨域的常用方法")]),t._v(" "),n("p",[n("strong",[t._v("1. JSONP")])]),t._v(" "),n("p",[t._v("jsonp 本质上是一个 Hack，它的原理就是利用"),n("code",[t._v("<script>")]),t._v("标签不受同源策略限制的特性，通过 "),n("code",[t._v("<script>")]),t._v(" 标签指向一个需要访问的地址并提供一个回调函数来接收数据，从而实现跨域操作。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://domain/api?param1=a&param2=b&callback=jsonp"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("jsonp")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \tconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 或者是下面这种方式")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nwindow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("callback")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://demo.com/api.js"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该接口将返回 callback({x:10, y:20}) 执行 callback 方法")]),t._v("\n")])])]),n("ol",[n("li",[t._v("提前定义好跨域请求的接口要返回的函数")]),t._v(" "),n("li",[t._v("通过 script 跨域加载 js 文件，绕过浏览器的同源策略")]),t._v(" "),n("li",[t._v("加载请求的 js 文件，同时执行 callback 函数 得到请求的数据")])]),t._v(" "),n("p",[t._v("JSONP 使用简单且兼容性不错，但是它只限于 "),n("code",[t._v("get")]),t._v(" 请求。")]),t._v(" "),n("p",[t._v("在开发中可能会遇到多个 JSONP 请求的回调函数名是相同的，这时候就需要自己封装一个 JSONP，以下是简单实现")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("jsonp")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" jsonpCallback"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" success")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" script "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  script"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" url\n  script"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("async "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  script"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/javascript'")]),t._v("\n  window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("jsonpCallback"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    success "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("success")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  document"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("jsonp")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://xxx'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'callback'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[n("strong",[t._v("2. CORS")])]),t._v(" "),n("p",[t._v("CORS 是目前主流的跨域解决方案，跨域资源共享 (CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器 让运行在一个 origin (domain) 上的 Web 应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。")]),t._v(" "),n("p",[t._v("CORS 需要浏览器和后端同时支持。浏览器会自动进行 CORS 通信，实现 CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。")]),t._v(" "),n("blockquote",[n("p",[t._v("IE 8 和 9 需要通过 "),n("code",[t._v("XDomainRequest")]),t._v(" 来实现。")])]),t._v(" "),n("p",[t._v("服务端通过设置 http header 的 "),n("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 属性就可以开启 CORS。")]),t._v(" "),n("p",[t._v("该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不同的后端语言会有不同")]),t._v("\nresponse"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Access-Control-Allow-Origin"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://test.com"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不建议直接写 '*'")]),t._v("\n")])])]),n("blockquote",[n("p",[t._v("在生产环境中建议用成熟的开源中间件解决问题。")])]),t._v(" "),n("p",[n("strong",[t._v("其它跨域方案")])]),t._v(" "),n("ol",[n("li",[n("p",[t._v("HTML5 XMLHttpRequest 有一个 API，"),n("code",[t._v("postMessage()")]),t._v("方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这种方式通常用于获取嵌入页面中的第三方页面数据。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个页面发送消息，另一个页面判断来源并接收消息。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发送消息端")]),t._v("\nwindow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://test.com'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接收消息端")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" mc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MessageChannel")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" origin "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("origin "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("originalEvent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("origin\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("origin "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://test.com'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'验证通过'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了，因此可以跨域。")])]),t._v(" "),n("li",[n("p",[t._v("window.name + iframe：window.name 属性值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值，我们可以利用这个特点进行跨域。")])]),t._v(" "),n("li",[n("p",[t._v("location.hash + iframe：a.html 欲与 c.html 跨域相互通信，通过中间页 b.html 来实现。 三个页面，不同域之间利用 iframe 的 location.hash 传值，相同域之间直接 js 访问来通信。")])]),t._v(" "),n("li",[n("p",[t._v("document.domain + iframe： 该方式只能用于二级域名相同的情况下，比如 "),n("code",[t._v("a.test.com")]),t._v(" 和 "),n("code",[t._v("b.test.com")]),t._v(" 适用于该方式。我们只需要给页面添加 "),n("code",[t._v("document.domain = 'test.com'")]),t._v(" 表示二级域名都相同就可以实现跨域，两个页面都通过 js 强制设置"),n("code",[t._v("document.domain")]),t._v("为基础主域，就实现了同域。")])])]),t._v(" "),n("blockquote",[n("p",[t._v("推荐阅读："),n("a",{attrs:{href:"https://juejin.im/post/5c23993de51d457b8c1f4ee1#heading-19",target:"_blank",rel:"noopener noreferrer"}},[t._v("九种跨域方式"),n("OutboundLink")],1)])]),t._v(" "),n("h2",{attrs:{id:"存储"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#存储"}},[t._v("#")]),t._v(" 存储")]),t._v(" "),n("h3",{attrs:{id:"前端存储有几种方式？区别是什么？🌟"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前端存储有几种方式？区别是什么？🌟"}},[t._v("#")]),t._v(" 前端存储有几种方式？区别是什么？🌟")]),t._v(" "),n("p",[n("strong",[t._v("一共 5 种方式：")]),t._v(" cookies、localstorage、sessionstorage、Web SQL（已废弃）、IndexedDB")]),t._v(" "),n("ol",[n("li",[n("p",[n("strong",[t._v("Cookies：")])]),t._v(" "),n("p",[t._v("本身是用于客户端和服务端通信的，但是它有本地存储的功能，于是就被 ”借用“。是在 HTML5 标准前本地储存的主要方式。")]),t._v(" "),n("p",[t._v("优点是是兼容性好，但缺点很多：数据存储量太小，只有 4kb。所有 http 请求头自动携带 cookie ，浪费流量，影响获取资源的效率。 每个 domain 限制 20 个 cookie，API 使用起来麻烦需要自行封装。")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("localStorage：")])]),t._v(" "),n("p",[t._v("HTML5 加入的以键值对 (Key-Value) 为标准的方式，专门为存储而设计。优点是操作方便。永久性储存（除非手动删除），并可用于所有同源（相同的域名、协议和端口）窗口（或标签页），大小为 5M，兼容 IE8+")]),t._v(" "),n("blockquote",[n("p",[t._v("IOS safari 隐身模式下，localStorage.getItem 会报错，建议统一使用 try-catch 封装。")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("sessionStorage：")])]),t._v(" "),n("p",[t._v("与 localStorage 基本类似，API 简单易用。区别是 sessionStorage 在当页面关闭后会被清理，而且与 cookie、localStorage 不同，他不能在所有同源窗口中共享，是会话级别的储存方式")]),t._v(" "),n("blockquote",[n("p",[t._v("这里需要注意的是，页面及标签页仅指顶级窗口，如果一个标签页包含多个 iframe 标签且他们属于同源页面，那么他们之间是可以共享 sessionStorage 的。")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("Web SQL：")])]),t._v(" "),n("p",[t._v("2010 年被 W3C 废弃的本地数据库数据存储方案，但是主流浏览器（火狐除外）都已经有了相关的实现，web sql 类似于 SQLite，是真正意义上的关系型数据库，用 sql 进行操作，当我们用 JavaScript 时要进行转换，较为繁琐。")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("IndexedDB：")])]),t._v(" "),n("p",[t._v("是被正式纳入 HTML5 标准的数据库储存方案，它是 NoSQL 数据库，用键值对进行储存，可以进行快速读取操作，非常适合 web 场景，同时用 JavaScript 进行操作会非常方便。")])])]),t._v(" "),n("p",[t._v("速览表：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[t._v("特性")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("cookie")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("localStorage")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("sessionStorage")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("indexDB")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("数据生命周期")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("一般由服务器生成，可以设置过期时间")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("除非被清理，否则一直存在")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("页面关闭就清理")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("除非被清理，否则一直存在")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("数据存储大小")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("4K")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("5M")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("5M")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("无限")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("与服务端通信")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("每次都会携带在 header 中，对于请求性能影响")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("不参与")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("不参与")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("不参与")])])])]),t._v(" "),n("p",[n("strong",[t._v("建议：")]),t._v(" 从上表可以看出，"),n("code",[t._v("cookie")]),t._v(" 已经不建议用于存储。如果没有大量数据存储需求的话，可以使用 "),n("code",[t._v("localStorage")]),t._v(" 和 "),n("code",[t._v("sessionStorage")]),t._v(" 。对于不怎么改变的数据尽量使用 "),n("code",[t._v("localStorage")]),t._v(" 存储，否则可以用 "),n("code",[t._v("sessionStorage")]),t._v(" 存储。")]),t._v(" "),n("p",[t._v("对于 "),n("code",[t._v("cookie")]),t._v("，我们还需要注意安全性。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("作用")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("value")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("http-only")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("不能通过 JS 访问 Cookie，减少 XSS 攻击")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("secure")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("只能在协议为 HTTPS 的请求中携带")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("same-site")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("规定浏览器不能在跨域请求中携带 Cookie，减少 CSRF 攻击")])])])]),t._v(" "),n("blockquote",[n("p",[t._v("推荐阅读："),n("a",{attrs:{href:"https://segmentfault.com/a/1190000005927232",target:"_blank",rel:"noopener noreferrer"}},[t._v("聊一聊前端存储那些事"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);