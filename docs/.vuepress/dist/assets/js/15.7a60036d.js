(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{239:function(v,t,_){"use strict";_.r(t);var e=_(0),r=Object(e.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"http-协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-协议"}},[v._v("#")]),v._v(" HTTP 协议")]),v._v(" "),_("p",[v._v("HTTP 协议是个无状态协议，不会保存状态。")]),v._v(" "),_("blockquote",[_("p",[v._v("推荐阅读："),_("a",{attrs:{href:"https://mp.weixin.qq.com/s/sakIv-NidqkO1tviBHxtWQ",target:"_blank",rel:"noopener noreferrer"}},[v._v("解读HTTP/2与HTTP/3 的新特性"),_("OutboundLink")],1)])]),v._v(" "),_("h2",{attrs:{id:"http-有哪些方法？"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-有哪些方法？"}},[v._v("#")]),v._v(" HTTP 有哪些方法？")]),v._v(" "),_("ul",[_("li",[v._v("HTTP 1.0 定义了三种请求方法： GET，POST 和 HEAD 方法")]),v._v(" "),_("li",[v._v("HTTP1.1 新增了五种请求方法：OPTIONS，PUT，DELETE，TRACE 和 CONNECT")])]),v._v(" "),_("h2",{attrs:{id:"这些方法的具体作用是什么？"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#这些方法的具体作用是什么？"}},[v._v("#")]),v._v(" 这些方法的具体作用是什么？")]),v._v(" "),_("ul",[_("li",[v._v("GET: 通常用于请求服务器发送某些资源")]),v._v(" "),_("li",[v._v("HEAD: 请求资源的头部信息，并且这些头部与 HTTP GET 方法请求时返回的一致。该请求方法的一个使用场景是在下载一个大文件前先获取其大小再决定是否要下载，以此可以节约带宽资源")]),v._v(" "),_("li",[v._v("OPTIONS: 用于获取目的资源所支持的通信选项")]),v._v(" "),_("li",[v._v("POST: 发送数据给服务器")]),v._v(" "),_("li",[v._v("PUT: 用于新增资源或者使用请求中的有效负载替换目标资源的表现形式")]),v._v(" "),_("li",[v._v("DELETE: 用于删除指定的资源")]),v._v(" "),_("li",[v._v("PATCH: 用于对资源进行部分修改")]),v._v(" "),_("li",[v._v("CONNECT: HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器")]),v._v(" "),_("li",[v._v("TRACE: 回显服务器收到的请求，主要用于测试或诊断")])]),v._v(" "),_("h2",{attrs:{id:"get-和-post-有什么区别？🌟"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-有什么区别？🌟"}},[v._v("#")]),v._v(" GET 和 POST 有什么区别？🌟")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("数据传输方式不同：")]),v._v(" GET 请求通过 URL 传输数据，而 POST 的数据通过请求体传输。")])]),v._v(" "),_("blockquote",[_("p",[v._v("URL 有长度限制，会影响 Get 请求，但是这个长度限制是浏览器规定的，不是 RFC 规定的。Post 可以通过 request body 来传输比 Get 更多的数据。")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("安全性不同：")]),v._v(" POST 的数据因为在请求主体内，所以有一定的安全性保证，而 GET 的数据在 URL 中，通过历史记录，缓存很容易查到数据信息。")])]),v._v(" "),_("blockquote",[_("p",[v._v("Post 相对 Get 安全一点点 虽然 Get 请求能被缓存，Post 不能。但是在抓包的情况下都是一样的。")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("数据类型不同：")]),v._v(" GET 只允许 ASCII 字符，而 POST 对数据类型不做限制，所以支持更多的编码类型。")]),v._v(" "),_("li",[_("strong",[v._v("GET 无害：")]),v._v(" 刷新、后退等浏览器操作 GET 请求是无害的，POST 可能重复提交表单")]),v._v(" "),_("li",[_("strong",[v._v("特性不同：")]),v._v(" GET 是安全（这里的安全是指只读特性，就是使用这个方法不会引起服务器状态变化）且幂等（幂等的概念是指同一个请求方法执行多次和仅执行一次的效果完全相同），而 POST 是非安全非幂等")])]),v._v(" "),_("h3",{attrs:{id:"副作用和幂等的概念："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#副作用和幂等的概念："}},[v._v("#")]),v._v(" 副作用和幂等的概念：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("副作用指对服务器上的资源做改变，搜索是无副作用的，注册是有副作用的。")])]),v._v(" "),_("li",[_("p",[v._v("幂等指发送 M 和 N 次请求（两者不相同且都大于 1），服务器上资源的状态一致，比如注册 10 个和 11 个帐号是不幂等的，对文章进行更改 10 次和 11 次是幂等的。")])])]),v._v(" "),_("blockquote",[_("p",[v._v("在规范的应用场景上说，Get 多用于无副作用，幂等的场景，例如搜索关键字。")]),v._v(" "),_("p",[v._v("Post 多用于副作用，不幂等的场景，例如注册。")])]),v._v(" "),_("p",[_("strong",[v._v("PUT 和 POST 都是给服务器发送新增资源，有什么区别？")])]),v._v(" "),_("p",[v._v("PUT 和 POST 方法的区别是，PUT 方法是幂等的：连续调用一次或者多次的效果相同（无副作用），而 POST 方法是非幂等的。")]),v._v(" "),_("p",[v._v("除此之外还有一个区别，通常情况下，PUT 的 URI 指向是具体单一资源，而 POST 可以指向资源集合。")]),v._v(" "),_("p",[v._v("举个🌰，我们在开发一个博客系统，当我们要创建一篇文章的时候往往用 POST 请求"),_("code",[v._v("https://www.juejin.com/articles")]),v._v("，这个请求的语义是，在 articles 的资源集合下创建一篇新的文章，如果我们多次提交这个请求会创建多个文章，这是非幂等的。")]),v._v(" "),_("p",[v._v("而 PUT 请求"),_("code",[v._v("https://www.juejin.com/articles/123")]),v._v("的语义是更新对应文章的内容（比如修改作者名称等），这个 URI 指向的就是单一资源，而且是幂等的，比如你把『XXX』修改成『蔡徐坤』，提交多少次都是修改成『蔡徐坤』")]),v._v(" "),_("blockquote",[_("p",[v._v("ps: 『POST 表示创建资源，PUT 表示更新资源』这种说法是错误的，这两个方法都能创建资源，根本区别在于幂等性")])]),v._v(" "),_("p",[_("strong",[v._v("PUT 和 PATCH 都是给服务器发送修改资源，有什么区别？")])]),v._v(" "),_("p",[v._v("PUT 和 PATCH 都是更新资源，而 PATCH 用来对已知资源进行局部更新。")]),v._v(" "),_("h2",{attrs:{id:"http-的部首有哪些？"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-的部首有哪些？"}},[v._v("#")]),v._v(" HTTP 的部首有哪些？")]),v._v(" "),_("blockquote",[_("p",[v._v("用 typroa 编辑更新")])]),v._v(" "),_("h2",{attrs:{id:"http-的请求报文是什么样的？"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-的请求报文是什么样的？"}},[v._v("#")]),v._v(" http 的请求报文是什么样的？")]),v._v(" "),_("p",[v._v("请求报文有 4 部分组成：")]),v._v(" "),_("p",[v._v("请求行\n请求头部\n空行\n请求体")]),v._v(" "),_("h2",{attrs:{id:"常见状态码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常见状态码"}},[v._v("#")]),v._v(" 常见状态码")]),v._v(" "),_("p",[_("strong",[v._v("2XX 成功")])]),v._v(" "),_("ul",[_("li",[v._v("200 OK，表示客户端请求成功，在服务器端被正确处理 ✨")]),v._v(" "),_("li",[v._v("201 Created 请求已经被实现，而且有一个新的资源已经依据请求的需要而建立")]),v._v(" "),_("li",[v._v("202 Accepted 请求已接受，但是还没执行，不保证完成请求")]),v._v(" "),_("li",[v._v("204 No content，表示请求成功，但响应报文不含实体的主体部分")]),v._v(" "),_("li",[v._v("205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容")]),v._v(" "),_("li",[v._v("206 Partial Content，进行范围请求")])]),v._v(" "),_("p",[_("strong",[v._v("3XX 重定向")])]),v._v(" "),_("ul",[_("li",[v._v("301 moved permanently，永久性重定向，资源已被分配了新的 URL ✨")]),v._v(" "),_("li",[v._v("302 found，临时性重定向，资源临时被分配了新的 URL ✨")]),v._v(" "),_("li",[v._v("303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源")]),v._v(" "),_("li",[v._v("304 not modified，文件未修改，可以直接使用缓存的文件 ✨")]),v._v(" "),_("li",[v._v("307 temporary redirect，临时重定向，和 302 含义类似，但是期望客户端保持请求方法不变向新的地址发出请求")])]),v._v(" "),_("blockquote",[_("p",[_("strong",[v._v("同样是重定向 302，303，307 的区别？")])]),v._v(" "),_("p",[v._v("302 是 http1.0 的协议状态码，在 http1.1 版本的时候为了细化 302 状态码又出来了两个 303 和 307。")]),v._v(" "),_("p",[v._v("303 明确表示客户端应当采用 get 方法获取资源，他会把 POST 请求变为 GET 请求进行重定向。 307 会遵照浏览器标准，不会从 post 变为 get。")])]),v._v(" "),_("p",[_("strong",[v._v("4XX 客户端错误")])]),v._v(" "),_("ul",[_("li",[v._v("400 bad request，客户端请求报文存在语法错误，不能被服务器所理解 ✨")]),v._v(" "),_("li",[v._v("401 unauthorized，请求未经授权，无法访问。表示发送的请求需要有通过 HTTP 认证的认证信息 ✨")]),v._v(" "),_("li",[v._v("403 forbidden，服务器收到请求，但是对请求资源的访问拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因 ✨")]),v._v(" "),_("li",[v._v("404 not found，请求的资源不存在，服务器上没有找到请求的资源 ✨")]),v._v(" "),_("li",[v._v("408 Request timeout, 客户端请求超时")]),v._v(" "),_("li",[v._v("409 Confict, 请求的资源可能引起冲突")])]),v._v(" "),_("p",[_("strong",[v._v("5XX 服务器错误")])]),v._v(" "),_("ul",[_("li",[v._v("500 internal sever error，服务器端在执行请求时发生不可预期的错误，导致无法完成客户端的请求 ✨")]),v._v(" "),_("li",[v._v("501 Not Implemented 请求超出服务器能力范围，例如服务器不支持当前请求所需要的某个功能，或者请求是服务器不支持的某个方法")]),v._v(" "),_("li",[v._v("503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求  ✨")]),v._v(" "),_("li",[v._v("505 http version not supported 服务器不支持，或者拒绝支持在请求中使用的 HTTP 版本")])]),v._v(" "),_("blockquote",[_("p",[_("a",{attrs:{href:"https://sunburst.wang/posts/2018/02/12/common-http-status-code.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("常见 HTTP 状态码含义"),_("OutboundLink")],1)])]),v._v(" "),_("h2",{attrs:{id:"keep-alive-是干什么的？"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive-是干什么的？"}},[v._v("#")]),v._v(" keep-alive 是干什么的？")]),v._v(" "),_("p",[v._v("在早期的 HTTP/1.0 中，每次 http 请求都要创建一个连接，而创建连接的过程需要消耗资源和时间，为了减少资源消耗，缩短响应时间，就需要重用连接。在后来的 HTTP/1.0 中以及 HTTP/1.1 中，引入了重用连接的机制，如果想要保持长连接，就需要在 http 请求头中加入"),_("code",[v._v("Connection: keep-alive")]),v._v("来告诉对方这个请求响应完成后不要关闭，下一次咱们还用这个请求继续交流。")]),v._v(" "),_("p",[_("strong",[v._v("keep-alive 的优点：")])]),v._v(" "),_("ul",[_("li",[v._v("较少的 CPU 和内存的使用（由于同时打开的连接的减少了）")]),v._v(" "),_("li",[v._v("允许请求和应答的 HTTP 管线化")]),v._v(" "),_("li",[v._v("降低拥塞控制 （TCP 连接减少了）")]),v._v(" "),_("li",[v._v("减少了后续请求的延迟（无需再进行握手）")]),v._v(" "),_("li",[v._v("报告错误无需关闭 TCP 连接")])]),v._v(" "),_("h2",{attrs:{id:"http-的缓存的过程是怎样的？🌟"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-的缓存的过程是怎样的？🌟"}},[v._v("#")]),v._v(" HTTP 的缓存的过程是怎样的？🌟")]),v._v(" "),_("blockquote",[_("p",[v._v("todo")])]),v._v(" "),_("h2",{attrs:{id:"从输入-url-到页面加载完成的过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#从输入-url-到页面加载完成的过程"}},[v._v("#")]),v._v(" 从输入 URL 到页面加载完成的过程")]),v._v(" "),_("ol",[_("li",[v._v("首先做 DNS 查询，如果做了智能 DNS 解析的话，会提供访问速度最快的 IP 地址回来")]),v._v(" "),_("li",[v._v("接下来是 TCP 握手，应用层会下发数据给传输层，这里 TCP 协议会指明两端的端口号，然后下发给网络层。网络层中的 IP 协议会确定 IP 地址，并且指示数据传输中如何跳转路由器。然后数据包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了")]),v._v(" "),_("li",[v._v("TCP 握手结束后会进行 TLS 握手，然后就开始正式的传输数据")]),v._v(" "),_("li",[v._v("数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 HTML 文件")]),v._v(" "),_("li",[v._v("首先浏览器会判断状态码是什么，如果是 200 那就继续解析，如果 400 或 500 的话就会报错，如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错")]),v._v(" "),_("li",[v._v("浏览器开始解析文件，如果是 gzip 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件")]),v._v(" "),_("li",[v._v("文件解码成功后会正式开始渲染流程，先会根据 HTML 构建 DOM 树，有 CSS 的话会去构建 CSSOM 树。如果遇到 "),_("code",[v._v("script")]),v._v(" 标签的话，会判断是否存在 "),_("code",[v._v("async")]),v._v(" 或者 "),_("code",[v._v("defer")]),v._v(" ，前者会并行进行下载并执行 JS，后者会先下载文件，然后等待 HTML 解析完成后顺序执行，如果以上都没有，就会阻塞住渲染流程直到 JS 执行完毕。遇到文件下载的会去下载文件，这里如果使用 HTTP 2.0 协议的话会极大的提高多图的下载效率。")]),v._v(" "),_("li",[v._v("初始的 HTML 被完全加载和解析后会触发 "),_("code",[v._v("DOMContentLoaded")]),v._v(" 事件")]),v._v(" "),_("li",[v._v("CSSOM 树和 DOM 树构建完成后会开始生成 Render 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西")]),v._v(" "),_("li",[v._v("在生成 Render 树的过程中，浏览器就开始调用 GPU 绘制，合成图层，将内容显示在屏幕上了")])])])}),[],!1,null,null,null);t.default=r.exports}}]);