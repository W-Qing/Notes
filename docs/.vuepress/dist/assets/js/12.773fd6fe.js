(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{215:function(t,s,a){t.exports=a.p+"assets/img/babel.566a1ac8.png"},243:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"相关概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#相关概念"}},[t._v("#")]),t._v(" 相关概念")]),t._v(" "),n("p",[t._v("https://juejin.cn/post/6844903588553048077#heading-33")]),t._v(" "),n("h2",{attrs:{id:"什么是工程化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是工程化"}},[t._v("#")]),t._v(" 什么是工程化")]),t._v(" "),n("h4",{attrs:{id:"定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),n("ul",[n("li",[t._v("工程化即系统化、模块化、规范化的一个过程。")]),t._v(" "),n("li",[t._v("如果说计算机科学要解决的是系统的某个具体问题，或者更通俗点说是面向编码的，那么工程化要解决的是如何提高整个系统生产效率。")]),t._v(" "),n("li",[t._v("与其说软件工程是一门科学，不如说它更偏向于管理学和方法论。")])]),t._v(" "),n("h4",{attrs:{id:"解决什么问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解决什么问题"}},[t._v("#")]),t._v(" 解决什么问题")]),t._v(" "),n("ul",[n("li",[t._v("工程化解决的问题是，如何提高编码、测试、维护阶段的生产效率。")])]),t._v(" "),n("h2",{attrs:{id:"工程化要解决什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工程化要解决什么"}},[t._v("#")]),t._v(" 工程化要解决什么")]),t._v(" "),n("p",[n("strong",[t._v("1 制定各项规范，让工作有章可循")])]),t._v(" "),n("ul",[n("li",[t._v("目录结构、文件命名规范、编码规范、开发流程规范、接口规范等")])]),t._v(" "),n("p",[n("strong",[t._v("2 使用版本控制工具，高效安全的管理源代码")])]),t._v(" "),n("ul",[n("li",[t._v("Git 分支管理、commit 描述规范、merge request、code review")])]),t._v(" "),n("p",[n("strong",[t._v("3 使用合适的前端技术和框架，提高生产效率，降低维护难度")])]),t._v(" "),n("ul",[n("li",[t._v("模块化的代码组织方式(JS模块化、CSS模块化)")]),t._v(" "),n("li",[t._v("组件化的编程思想，处理UI层(React、Vue)")]),t._v(" "),n("li",[t._v("数据层分离(reudx、mbox)")])]),t._v(" "),n("p",[n("strong",[t._v("4 提高代码的可测试性，引入单元测试，提高代码质量")])]),t._v(" "),n("p",[n("strong",[t._v("5 通过使用各种自动化的工程工具，提升整个开发、部署效率")])]),t._v(" "),n("h2",{attrs:{id:"模块化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模块化"}},[t._v("#")]),t._v(" 模块化")]),t._v(" "),n("p",[n("strong",[t._v("模块化主要解决的问题：")])]),t._v(" "),n("p",[t._v("解决代码分割、增强维护性、提高代码重用、作用域隔离、模块之间的依赖管理、发布的自动化打包与处理等多个方面。")]),t._v(" "),n("h3",{attrs:{id:"都有哪几种方式可以实现模块化，各有什么特点？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#都有哪几种方式可以实现模块化，各有什么特点？"}},[t._v("#")]),t._v(" 都有哪几种方式可以实现模块化，各有什么特点？")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.cn/post/6844904056847073293#heading-0",target:"_blank",rel:"noopener noreferrer"}},[t._v("你可能不知道的 JavaScript 模块化野史"),n("OutboundLink")],1)]),t._v(" "),n("p",[n("strong",[t._v("立即执行函数")])]),t._v(" "),n("blockquote",[n("p",[t._v("在早期，使用立即执行函数实现模块化是常见的手段，通过函数作用域解决了命名冲突、污染全局作用域的问题")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("globalVariable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   globalVariable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("test")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... 声明各种变量、函数都不会污染全局作用域")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("globalVariable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[n("strong",[t._v("AMD 和 CMD")])]),t._v(" "),n("blockquote",[n("p",[t._v("目前这两种实现方式已经过时，只需要了解这两者是如何使用的即可。")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// AMD")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./b'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加载模块完毕可以使用")]),t._v("\n  a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("do")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("do")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// CMD")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("require"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" exports"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" module")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加载模块")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以把 require 写在函数体的任意地方实现延迟加载")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[n("strong",[t._v("ES Module")])]),t._v(" "),n("blockquote",[n("p",[t._v("在有 Babel 的情况下，我们可以直接使用 ES6 的模块化 ES Module。这是原生实现的模块化方案。")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 两种导出模块的 API")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// file a.js")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// file b.js")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引入模块的 API")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./a.js'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XXX")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./b.js'")]),t._v("\n")])])]),n("p",[n("strong",[t._v("CommonJS")])]),t._v(" "),n("blockquote",[n("p",[t._v("CommonJS 最早是Node 独有的规范，目前也仍然广泛使用，比如在 "),n("code",[t._v("Webpack")]),t._v(" 中就能见到它。当然，浏览器中使用就需要用到 "),n("code",[t._v("Browserify")]),t._v(" 解析了。另外目前在 Node 中的模块管理也已经和CommonJS 有一些区别了。")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a.js")]),t._v("\nmodule"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// or")]),t._v("\nexports"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b.js")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" module "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./a.js'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmodule"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> log 1")]),t._v("\n")])])]),n("p",[t._v("在上述代码中，"),n("code",[t._v("module.exports")]),t._v(" 和 "),n("code",[t._v("exports")]),t._v(" 很容易混淆，让我们来看看大致内部实现")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" module "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./a.js'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmodule"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里其实就是包装了一层立即执行函数，这样就不会污染全局变量了，")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重要的是 module 这里，module 是 Node 独有的一个变量")]),t._v("\nmodule"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// module 基本实现")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" module "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  id"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxxx'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 我总得知道怎么去找到它吧")]),t._v("\n  exports"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// exports 就是个空对象")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个是为什么 exports 和 module.exports 用法相似的原因")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" exports "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" module"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("load")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("module")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 导出的东西")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    module"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" module"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当我 require 的时候去找到独特的 id，然后将要使用的东西用立即执行函数包装下，over")]),t._v("\n")])])]),n("p",[t._v("另外虽然 "),n("code",[t._v("exports")]),t._v(" 和 "),n("code",[t._v("module.exports")]),t._v(" 用法相似，但是不能对 "),n("code",[t._v("exports")]),t._v(" 直接赋值，不会有任何效果。")]),t._v(" "),n("blockquote",[n("p",[t._v("因为 "),n("code",[t._v("var exports = module.exports")]),t._v(" 这句代码表明了 "),n("code",[t._v("exports")]),t._v(" 和 "),n("code",[t._v("module.exports")]),t._v("享有相同地址，通过改变对象的属性值会对两者都起效，但是如果直接对 "),n("code",[t._v("exports")]),t._v(" 赋值就会导致两者不再指向同一个内存地址，修改并不会对 "),n("code",[t._v("module.exports")]),t._v(" 起效。")])]),t._v(" "),n("p",[n("strong",[t._v("对于 CommonJS 和 ES6 中的模块化的两者区别是：")])]),t._v(" "),n("ul",[n("li",[t._v("前者支持动态导入，也就是 "),n("code",[t._v("require(${path}/xx.js)")]),t._v("，后者目前不支持，但是已有提案。（webpack 中可用）")]),t._v(" "),n("li",[t._v("前者是同步导入，因为用于服务端，文件都在本地，同步导入即使卡住对主线程影响也不大。而后者是异步导入，因为用于浏览器，需要下载文件，如果也采用同步导入会对渲染有很大影响。")]),t._v(" "),n("li",[t._v("前者在导出时都是值拷贝，就算导出的值变了，导入的值也不会改变，所以如果想更新值，必须重新导入一次。但是后者采用实时绑定的方式，导入导出的值都指向同一个内存地址，所以导入值会跟随导出值变化。")]),t._v(" "),n("li",[t._v("后者会编译成 "),n("code",[t._v("require/exports")]),t._v(" 执行。")])]),t._v(" "),n("h2",{attrs:{id:"babel-🌟"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#babel-🌟"}},[t._v("#")]),t._v(" Babel 🌟")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",[n("a",{attrs:{href:"https://www.babeljs.cn/docs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Babel"),n("OutboundLink")],1),t._v(" 是一个工具链，主要用于（"),n("strong",[t._v("语法转换")]),t._v("）将 ECMAScript 2015+ 版本的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。另外还有通过 "),n("strong",[t._v("Polyfill")]),t._v(" 方式在目标环境中添加缺失的特性 (通过 "),n("a",{attrs:{href:"https://www.babeljs.cn/docs/babel-polyfill",target:"_blank",rel:"noopener noreferrer"}},[t._v("@babel/polyfill"),n("OutboundLink")],1),t._v(" 模块)、以及"),n("strong",[t._v("源码转换")]),t._v(" (codemods)。")])]),t._v(" "),n("p",[n("strong",[t._v("Babel 的本质就是一个 JavaScript 编译器")]),t._v(" 它的转译过程即工作原理分为三个阶段：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(215),alt:"babel原理"}})]),t._v(" "),n("ol",[n("li",[n("p",[n("strong",[t._v("Parse 解析：将代码解析生成抽象语法树( 即AST )")])]),t._v(" "),n("p",[t._v("过程包括词法分析与语法分析：")]),t._v(" "),n("ul",[n("li",[t._v("词法分析：将代码(字符串)分割为 token流，即语法单元成的数组")]),t._v(" "),n("li",[t._v("语法分析：分析 token 流(上面生成的数组)并生成 AST")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("Transform 转换：访问 AST 的节点进行变换操作生产新的 AST")])]),t._v(" "),n("ul",[n("li",[t._v("对于 AST 进行变换一系列的操作，babel 接受得到 AST 并通过 babel-traverse 对其进行遍历，在此过程中对相应节点进行添加、更新及移除等操作。")]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/NervJS/taro/blob/master/packages/taro-transformer-wx/src/index.ts#L15",target:"_blank",rel:"noopener noreferrer"}},[t._v("Taro"),n("OutboundLink")],1),t._v("就是利用 babel 完成的小程序语法转换")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("Generate 生成：以新的 AST 为基础生成代码")])]),t._v(" "),n("ul",[n("li",[t._v("将变换后的 AST 再转换为 JS 代码, 使用到的模块是 babel-generator。")])])])]),t._v(" "),n("blockquote",[n("p",[t._v("如何写一个babel插件，参考"),n("a",{attrs:{href:"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#builders",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方的插件教程"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("如何一步步实现一个编译器，参考官网推荐的开源项目 "),n("a",{attrs:{href:"https://github.com/jamiebuilds/the-super-tiny-compiler",target:"_blank",rel:"noopener noreferrer"}},[t._v("the-super-tiny-compiler"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);